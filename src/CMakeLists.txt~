cmake_minimum_required(VERSION 2.8)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

include (FindPkgConfig)
if (PKG_CONFIG_FOUND)
  pkg_check_modules(GAZEBO gazebo REQUIRED)
else()
  message(FATAL_ERROR "pkg-config is required; please install it")
endif()

rosbuild_init()
rosbuild_genmsg()
rosbuild_gensrv()

include_directories(${GAZEBO_INCLUDE_DIRS})
link_directories(${GAZEBO_LIBRARY_DIRS})

include(cmake/roomba.cmake)

get_rospack_flags(roscpp)
include_directories(${roscpp_INCLUDE_DIRS})
link_directories(${roscpp_LIBRARY_DIRS})
set(CMAKE_INSTALL_RPATH "${roscpp_LIBRARY_DIRS}")

include_directories(${PCL_INCLUDE_DIRS})
link_directories(${PCL_LIBRARY_DIRS})
add_definitions(${PCL_DEFINITIONS})

# Library to control the wheels of the roomba.
add_library(ros_motor_controller SHARED roomba/motor_controller_plugin.cpp)
set_target_properties(ros_motor_controller PROPERTIES COMPILE_FLAGS "${roscpp_CFLAGS_OTHER}")
set_target_properties(ros_motor_controller PROPERTIES LINK_FLAGS "${roscpp_LDFLAGS_OTHER}")
target_link_libraries(ros_motor_controller ${roscpp_LIBRARIES})
install (TARGETS ros_motor_controller DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/gazebo_plugins/)

# Library to extract laser information from the sensor.
add_library(ros_laser_sensor SHARED roomba/laser_sensor_plugin.cpp)
set_target_properties(ros_laser_sensor PROPERTIES COMPILE_FLAGS "${roscpp_CFLAGS_OTHER}")
set_target_properties(ros_laser_sensor PROPERTIES LINK_FLAGS "${roscpp_LDFLAGS_OTHER}")
target_link_libraries(ros_laser_sensor ${roscpp_LIBRARIES})
install (TARGETS ros_laser_sensor DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/gazebo_plugins/)

# Executable to control the roomba.
#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
rosbuild_add_executable(avoid_walls roomba/avoid_walls_controller.cpp)

# A class that broadcasts all the TF information between different components of the robot.
rosbuild_add_executable(tf_transform_broadcaster roomba/tf_broadcaster.cpp)

rosbuild_add_executable(odom_to_tf utility/odom_to_tf.cpp)

rosbuild_add_executable(copy_cloudpoint2 utility/pointcloud2_timestrip.cpp)

rosbuild_add_executable(heightmap turtlebot/detectheight.cpp)

find_package(OpenCV REQUIRED)
rosbuild_add_executable(targetmap turtlebot/detecttarget.cpp)
target_link_libraries(targetmap ${OpenCV_LIBS} )

find_package(octomap REQUIRED)
#find_package(PCL 1.2 REQUIRED)
rosbuild_add_executable(octomap_builder turtlebot/octomap_builder.cpp)
#target_link_libraries(octomap_builder ${PCL_LIBRARIES})
target_link_libraries(octomap_builder ${OCTOMAP_LIBRARIES})

find_package(ompl REQUIRED)
rosbuild_add_executable(ompl_planner turtlebot/ompl_solver.cpp)
target_link_libraries(ompl_planner ${OMPL_LIBRARIES})
